name: Build & Push Production Docker Image

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

jobs:
  
  sonar:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    needs: sonar
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref != 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Retrieve wmb info from vault
      id: import-secrets-wmb
      uses: hashicorp/vault-action@v3.0.0
      with:
        url: ${{ secrets.VAULT_ADDR }}
        method: approle
        roleId: ${{ secrets.VAULT_ROLE_ID }}
        secretId: ${{ secrets.VAULT_SECRET_ID }}
        secrets: |
            kv/data/pipeline/wmb WMB_URL ;
            kv/data/pipeline/wmb WMB_PASSWORD
        exportEnv: true

    - name: Build and push :staging tag
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ghcr.io/${{ github.repository }}:staging

    - name: Build and push :latest tag
      if: github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ghcr.io/${{ github.repository }}:latest

    - name: Notify IRC on Success
      run: |
        export COMMIT_MSG=$(git log -1 --pretty=%B)
        export MESSAGE="Build and push of ghcr.io/${{ github.repository }}:staging completed with commit message: $COMMIT_MSG. See https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        curl -X POST -H "Content-Type: application/json" -d "{\"message\": \"$MESSAGE\", \"password\": \"${{ steps.import-secrets-wmb.outputs.WMB_PASSWORD }}\", \"colourcode\": 3}" ${{ steps.import-secrets-wmb.outputs.WMB_URL }}
      if: success()

    - name: Notify IRC on Failure
      run: |
        export COMMIT_MSG=$(git log -1 --pretty=%B)
        export MESSAGE="Build and push of ghcr.io/${{ github.repository }}:staging failed with commit message: $COMMIT_MSG. See https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        curl -X POST -H "Content-Type: application/json" -d "{\"message\": \"$MESSAGE\", \"password\": \"${{ steps.import-secrets-wmb.outputs.WMB_PASSWORD }}\", \"colourcode\": 4}" ${{ steps.import-secrets-wmb.outputs.WMB_URL }}
      if: failure()


  deploy:
      needs: build
      runs-on: ubuntu-latest
      if: github.ref == 'refs/heads/main'
      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Set up kubectl
          uses: azure/setup-kubectl@v4
          # with:
          #   version: 'v1.27.0'  # Adjust the version as per your Kubernetes version
          
        - name: Retrieve kubeconfig from Vault
          id: import-secrets
          uses: hashicorp/vault-action@v3.0.0
          with:
            url: ${{ secrets.VAULT_ADDR }}
            method: approle
            roleId: ${{ secrets.VAULT_ROLE_ID }}
            secretId: ${{ secrets.VAULT_SECRET_ID }}
            secrets: kv/data/pipeline/k3s kubeconfig
            exportEnv: true

        - name: Retrieve wmb info from vault
          id: import-secrets-wmb
          uses: hashicorp/vault-action@v3.0.0
          with:
            url: ${{ secrets.VAULT_ADDR }}
            method: approle
            roleId: ${{ secrets.VAULT_ROLE_ID }}
            secretId: ${{ secrets.VAULT_SECRET_ID }}
            secrets: |
                kv/data/pipeline/wmb WMB_URL ;
                kv/data/pipeline/wmb WMB_PASSWORD
            exportEnv: true
        
        - name: Save kubeconfig to file
          run: |
            mkdir -p $HOME/.kube
            echo '${{ steps.import-secrets.outputs.kubeconfig }}' > $HOME/.kube/config
            echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV

        - name: Restart Staging Deployment
          run: |
            kubectl -n staging rollout restart deployment chuckfindlayisme

        # Restart Deployment for Production (Only triggered if push to `main`)
        - name: Restart Production Deployment
          run: |
            kubectl -n production rollout restart deployment chuckfindlayisme
          if: github.ref == 'refs/heads/main'

        # - name: Smoke test production deployment
        #   uses: lakuapik/gh-actions-http-status@v1
        #   with:
        #     sites: '["https://chuck.findlayis.me/", "https://chuck.findlayis.me/404"]'
        #     expected: '[200, 404]'

        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
        - name: Notify IRC Success
          run: |
            export COMMIT_MSG=$(git log -1 --pretty=%B)
            export MESSAGE="Prod deploy for https://github.com/${{ github.repository }} completed successfully with commit message: $COMMIT_MSG. See https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            curl -X POST -H "Content-Type: application/json" -d "{\"message\": \"$MESSAGE\", \"password\": \"${{ steps.import-secrets-wmb.outputs.WMB_PASSWORD }}\", \"colourcode\": 3}" ${{ steps.import-secrets-wmb.outputs.WMB_URL }}
          if: success()
        - name: Notify IRC Failure
          run: |
            export COMMIT_MSG=$(git log -1 --pretty=%B)
            export MESSAGE="Prod deploy for https://github.com/${{ github.repository }} failed with commit message: $COMMIT_MSG. See https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            curl -X POST -H "Content-Type: application/json" -d "{\"message\": \"$MESSAGE\", \"password\": \"${{ steps.import-secrets-wmb.outputs.WMB_PASSWORD }}\", \"colourcode\": 4}" ${{ steps.import-secrets-wmb.outputs.WMB_URL }}
          if: failure()